#!/usr/bin/python
# -*- coding: UTF-8 -*-

import os
from subprocess import Popen, PIPE
import json
import sys
import atexit
from time import clock


# Methods for keeping track of time 
# (http://stackoverflow.com/questions/1557571/how-to-get-time-of-a-python-program-execution/1557906#1557906)
start = clock()
def start_timer():
	atexit.register(end_timer)
	start = clock()

def end_timer():
	end = clock()
	elapsed = end-start
	return elapsed

def secondsToStr(t):
    return "%d:%02d:%02d.%03d" % \
        reduce(lambda ll,b : divmod(ll[0],b) + ll[1:],
            [(t*1000,),1000,60,60])

# All debug prints can be easily commented out
def d_print(string):
	print string

def ascii_encode_dict(data):
    ascii_encode = lambda x: x.encode('ascii') if isinstance(x, unicode) else x 
    return dict(map(ascii_encode, pair) for pair in data.items())

# path of this python script
my_path = os.path.dirname(sys.argv[0])   
my_path = os.path.abspath(my_path)


# read the .test_setup file for the assignment number and name
settings = open(my_path + "/.ptest_setup").read()
settings = json.loads(settings, object_hook=ascii_encode_dict)

try:
	number = settings["number"]
except:
	print "assignment number required in setup file!"

try:
	name = settings["name"]
except:
	print "assignment name required in setup file!"


# his program name
his_program = "/c/cs323/Hwk{}/{}".format(number, name)

# the path in which to look for the test folder
testfile_base_path = settings["testfile_base_path"] if "testfile_base_path" in settings else "~/bin/Ptest/"

# the folder name that contains all the test cases
folder = settings["folder"] if "folder" in settings else "tests"+number

folder_path = testfile_base_path + folder + "/"

# get all the things in the folder specified by the setup.
# default is tests<assignment_number>
test_files = os.listdir(folder_path)

# gets the users name
who = os.popen('whoami').read().rstrip()


start_timer()
#print "====== Public Tests ======="

#print "==== Single Line Tests ===="

print "======== Test Files ======="
num_passed = 0
num_total = 0

for test_file in test_files:
	d_print(folder_path + test_file)

	contents = open(folder_path + test_file).read()
	my_p = Popen(name, stdin=PIPE, stdout=PIPE, stderr=PIPE)
	my_out, my_err = my_p.communicate(contents)

	his_p = Popen(his_program, stdin=PIPE, stdout=PIPE, stderr=PIPE)
	his_out, his_err = his_p.communicate(contents)

	# compare the outputs
	if my_out != his_out:
		print "× | test {}".format(test_file)
		print "  your output: {}".format(my_out)
		print "  stans output: {}".format(his_out)
	elif len(my_err.split('\n')) != len(his_err.split('\n')):
		print "ERROR: you printed {} lines to standard error, but stan had {}".format(len(my_err.split('\n')),len(his_err.split('\n')))
	else:
		num_passed += 1
		print "✓ | test {}".format(test_file)

	total += 1


print "====== Final Results ======"
print "  passed : {}".format(num_passed)
print "  failed : {}".format(num_total - num_passed)
